Grading at 10/26/2022:20:36:39.769792
For commit ID ebab6aa9788c9e92c4594a32cf842723e6707bcc
Grading at Wed Oct 26 04:35:54 PM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.2: Current test is story-step1 my_story1-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.3: Current test is story-step1 my_story1-2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.4: Current test is story-step1 my_story1-3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.5: Current test is story-step1
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.6: Current test is story-step1 story-step1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.7: Current test is story-step1 my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.8: Current test is story-step1 my_story2-2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.9: Current test is story-step1 my_story2-3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.10: Current test is story-step1 my_story1-4.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.11: Current test is story-step1 my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.12: Current test is story-step1 my_words_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.13: Current test is story-step1 story.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 my_words1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.3: Current test is story-step2 my_words2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.4: Current test is story-step2 my_words3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.5: Current test is story-step2 my_words4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.6: Current test is story-step2 my_words99.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.7: Current test is story-step2
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.8: Current test is story-step2 words.txt words.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.9: Current test is story-step2 my_story1-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.10: Current test is story-step2 my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

3.2: Current test is story-step3 words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.2: Current test is story-step4 words.txt -n my_story2-1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.3: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.4: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.5: Current test is story-step4 words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.6: Current test is story-step4 -n words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3803869== Memcheck, a memory error detector
==3803869== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3803869== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3803869== Command: ./story-step4 -n words.txt my_story2-1.txt
==3803869== Parent PID: 3803867
==3803869== 
==3803869== 
==3803869== HEAP SUMMARY:
==3803869==     in use at exit: 33 bytes in 2 blocks
==3803869==   total heap usage: 105 allocs, 103 frees, 19,171 bytes allocated
==3803869== 
==3803869== 33 (24 direct, 9 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==3803869==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3803869==    by 0x10A1AD: addCats (rand_story.c:293)
==3803869==    by 0x10A006: readCategories (rand_story.c:260)
==3803869==    by 0x10A09D: readLines (rand_story.c:279)
==3803869==    by 0x1094BE: main (story-step4.c:35)
==3803869== 
==3803869== LEAK SUMMARY:
==3803869==    definitely lost: 24 bytes in 1 blocks
==3803869==    indirectly lost: 9 bytes in 1 blocks
==3803869==      possibly lost: 0 bytes in 0 blocks
==3803869==    still reachable: 0 bytes in 0 blocks
==3803869==         suppressed: 0 bytes in 0 blocks
==3803869== 
==3803869== For lists of detected and suppressed errors, rerun with: -s
==3803869== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.7: Current test is story-step4 my_words5.txt my_story1-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.8: Current test is story-step4 -n my_words5.txt my_story1-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.9: Current test is story-step4 my_words5.txt my_story2-3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.10: Current test is story-step4 -n my_words5.txt my_story2-3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==3804283== Memcheck, a memory error detector
==3804283== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3804283== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3804283== Command: ./story-step4 -n my_words5.txt my_story2-3.txt
==3804283== Parent PID: 3804282
==3804283== 
==3804283== 
==3804283== HEAP SUMMARY:
==3804283==     in use at exit: 21 bytes in 2 blocks
==3804283==   total heap usage: 40 allocs, 38 frees, 15,267 bytes allocated
==3804283== 
==3804283== 21 (16 direct, 5 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==3804283==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3804283==    by 0x10A1AD: addCats (rand_story.c:293)
==3804283==    by 0x10A006: readCategories (rand_story.c:260)
==3804283==    by 0x10A09D: readLines (rand_story.c:279)
==3804283==    by 0x1094BE: main (story-step4.c:35)
==3804283== 
==3804283== LEAK SUMMARY:
==3804283==    definitely lost: 16 bytes in 1 blocks
==3804283==    indirectly lost: 5 bytes in 1 blocks
==3804283==      possibly lost: 0 bytes in 0 blocks
==3804283==    still reachable: 0 bytes in 0 blocks
==3804283==         suppressed: 0 bytes in 0 blocks
==3804283== 
==3804283== For lists of detected and suppressed errors, rerun with: -s
==3804283== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.11: Current test is story-step4 my_words5.txt my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.12: Current test is story-step4 -n my_words5.txt my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.13: Current test is story-step4 my_words_complex.txt my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.14: Current test is story-step4 -n my_words_complex.txt my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.15: Current test is story-step4 words.txt my_story2-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.16: Current test is story-step4 words.txt my_story2-5.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.17: Current test is story-step4 my_words6.txt my_story2-6.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.18: Current test is story-step4 -n my_words6.txt my_story2-6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.19: Current test is story-step4 my_words_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.20: Current test is story-step4 -n my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.21: Current test is story-step4 .txt my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.22: Current test is story-step4 -n my_words_complex.txt     my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
