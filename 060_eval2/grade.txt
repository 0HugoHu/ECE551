Grading at 10/26/2022:01:52:09.688393
For commit ID b1414ada18b0c6f29dfe314cbb52d21f6656668e
Grading at Tue Oct 25 09:51:50 PM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.2: Current test is story-step1 my_story1-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.3: Current test is story-step1 my_story1-2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

1.4: Current test is story-step1 my_story1-3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.5: Current test is story-step1
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.6: Current test is story-step1 story-step1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 my_words1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.3: Current test is story-step2 my_words2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.4: Current test is story-step2 my_words3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.5: Current test is story-step2 my_words4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.6: Current test is story-step2 my_words99.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.7: Current test is story-step2
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

3.2: Current test is story-step3 words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.3: Current test is story-step4 words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.4: Current test is story-step4 -n words.txt my_story2-1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.5: Current test is story-step4 my_words5.txt my_story1-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.6: Current test is story-step4 -n my_words5.txt my_story1-4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.7: Current test is story-step4 my_words5.txt my_story2-3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.8: Current test is story-step4 -n my_words5.txt my_story2-3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.9: Current test is story-step4 my_words_complex.txt my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.10: Current test is story-step4 -n my_words_complex.txt my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

4.11: Current test is story-step4 my_words_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.12: Current test is story-step4 -n my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.13: Current test is story-step4 .txt my_story_complex.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.14: Current test is story-step4 -n my_words_complex.txt     my_story_complex.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

You have passed the test cases YOU provided
If your tests are good, this is great. 
If your tests are insufficient, you should do much more testing

Overall Grade: NO GRADE YET
